AWSTemplateFormatVersion: '2010-09-09'
Description: Pipeline Stack


Parameters:

  Realm:
    Description: Name of the realm or client preferred name. Used to identify multiple instances of the app in the same account
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]*$

  VpcCIDR:
    Default: 10.50.0.0/16
    Type: String

  PublicSubnet1CIDR:
    Description: CIDR block for the public subnet in availability zone
    Type: String
    Default: 10.50.10.0/24

  PublicSubnet2CIDR:
    Description: CIDR block for the public subnet in availability zone
    Type: String
    Default: 10.50.20.0/24

  PrivateSubnet1CIDR:
    Description: CIDR block for the private subnet in availability zone
    Type: String
    Default: 10.50.30.0/24

  PrivateSubnet2CIDR:
    Description: CIDR block for the private subnet in availability zone
    Type: String
    Default: 10.50.40.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref Realm

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref Realm

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Realm} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Realm} Public Subnet (AZ2)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Realm} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  ContainerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Realm}-container-sec-group'
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub '${Realm}:VPC'

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${Realm}:PublicSubnet1'

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${Realm}:PublicSubnet2'

  ContainerSecGroup:
    Description: Security group with no ingress rule
    Value: !GetAtt ContainerSecGroup.GroupId
    Export:
      Name: !Sub '${Realm}:ContainerSecGroup'
