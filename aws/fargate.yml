AWSTemplateFormatVersion: '2010-09-09'
Description: Database Stack


Parameters:

  Realm:
    Description: Name of the realm or client preferred name. Used to identify multiple instances of the app in the same account
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]*$

  ProjectName:
    Type: String

  DomainName:
    Type: String

  ContainerPort:
    Type: Number
    Default: 5000

Resources:

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${Realm}-cluster'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    # Makes sure the log group is created before it is used.
    DependsOn: LogGroup
    Properties:
      # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
      Family: !Sub 'ecs-${Realm}'
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 256
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: 0.5GB
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      ExecutionRoleArn: !Ref ExecutionRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref Realm
          EntryPoint:
            - 'sh'
            - '-c'
          Command:
            - '/bin/sh -c ./run.sh'
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Realm}-repository:latest'
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
          Environment:
            - Name: APP_ENV
              Value: production
            - Name: APP_SETTINGS_PATH
              Value: /usr/src/app/config/settings.py
            - Name: APP_PATH
              Value: /usr/src/app

  # A role needed by ECS
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Realm}-execution-role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  # A role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Realm}-task-role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${Realm}-load-balancer-security-group'
      VpcId:
        Fn::ImportValue: !Sub '${Realm}:VPC'
      SecurityGroupEgress:
        # Allow all outbound from ALB to private subnet
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
          Description: Allow all outbound from containers
      SecurityGroupIngress:
        # Allow public 80
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          Description: public port 80
        # Allow public 443
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
          Description: public port 443

  FargateTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Realm}-fargate-security-group'
      GroupDescription: !Sub ${Realm}-fargate security group
      VpcId:
        Fn::ImportValue: !Sub '${Realm}:VPC'
      SecurityGroupEgress:
        # Allow all outbound from containers
        -
          IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
          Description: Allow all outbound from containers
      SecurityGroupIngress:
        # Allow ALB to connect to containers
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
          Description: Allows ALB access to port 5000


  Service:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    DependsOn:
      - ListenerHTTP
    Properties:
      ServiceName: !Ref Realm
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue: !Sub '${Realm}:PublicSubnet1'
            - Fn::ImportValue: !Sub '${Realm}:PublicSubnet2'
          SecurityGroups:
            - !GetAtt FargateTaskSecurityGroup.GroupId
      LoadBalancers:
        - ContainerName: !Ref Realm
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: /api/v1.0/status
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Join ['', [!Ref Realm, TargetGroup]]
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub '${Realm}:VPC'

  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  #      Certificates:
  #        - CertificateArn: !Ref Certificate

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        # this is the default, but is specified here in case it needs to be changed
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Name: !Sub '${Realm}-load-balancer'
      # "internal" is also an option
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub '${Realm}:PublicSubnet1'
        - Fn::ImportValue: !Sub '${Realm}:PublicSubnet2'

  #  DNSRecord:
  #    Type: AWS::Route53::RecordSet
  #    Properties:
  #      HostedZoneName: !Join ['', [!Ref HostedZoneName, .]]
  #      Name: !Join ['', [!Ref Subdomain, ., !Ref HostedZoneName, .]]
  #      Type: A
  #      AliasTarget:
  #        DNSName: !GetAtt LoadBalancer.DNSName
  #        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${Realm}'


Outputs:
  Endpoint:
    Description: Endpoint
    Value: !GetAtt 'LoadBalancer.DNSName'
    Export:
      Name: !Sub '${Realm}:FargateEndpoint'
